#!/usr/bin/env python
from __future__ import absolute_import, division, print_function

import argparse, time
import numpy as np

from planning.search import RRTPlanner
from planning.problems import R2Problem

def main(planning_env, planner, start, goal, argplan = 'rrt'):
    # Python 2/3 compatibility
    global input
    try:
        input = raw_input
    except NameError:
        pass

    # Plan.
    plan = planner.Plan(start, goal)

    tree = None
    visited = None
    tree = planner.tree
    return plan, tree, visited


if __name__ == "__main__":
    np.random.seed(111)
    parser = argparse.ArgumentParser(description='script for testing planners')

    parser.add_argument('-m', '--map', type=str, default='map1.txt',
                        help='The environment to plan on')    
    parser.add_argument('-p', '--planner', type=str, default='rrt',
                        help='The planner to run (astar, rrt, rrtstar)')
    parser.add_argument('-s', '--start', nargs='+', type=int, required=True)
    parser.add_argument('-g', '--goal', nargs='+', type=int, required=True)
    parser.add_argument('-e', '--epsilon', type=float, default=1.0, help='Epsilon for A*, Eta for RRT')
    parser.add_argument('-b', '--bias', type=float, default=0.05, help='Goal bias for RRT')
    parser.add_argument('--show-tree', action="store_true", help='Visualize tree at runtime')
    parser.add_argument('-size', '--batch-size', type=int, default=1, help='Sample batch size for RRT')
    parser.add_argument('--shortcut', action="store_true", help='shortcut')

    args = parser.parse_args()

    # First setup the environment and the robot.
    permissible_region = np.loadtxt(args.map, dtype=bool)
    planning_env = R2Problem(permissible_region)

    args.start = np.array(args.start)
    args.goal = np.array(args.goal)
    planner = RRTPlanner(planning_env, permissible_region, bias=args.bias, eta=args.epsilon, show_tree=args.show_tree, batch_size=args.batch_size, shortcut = args.shortcut)
    plan, tree, visited = main(planning_env, planner, args.start, args.goal, args.planner)
    planner.visualize_plan(plan, tree, visited)