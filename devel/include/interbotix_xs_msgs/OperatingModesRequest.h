// Generated by gencpp from file interbotix_xs_msgs/OperatingModesRequest.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_XS_MSGS_MESSAGE_OPERATINGMODESREQUEST_H
#define INTERBOTIX_XS_MSGS_MESSAGE_OPERATINGMODESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_xs_msgs
{
template <class ContainerAllocator>
struct OperatingModesRequest_
{
  typedef OperatingModesRequest_<ContainerAllocator> Type;

  OperatingModesRequest_()
    : cmd_type()
    , name()
    , mode()
    , profile_type()
    , profile_velocity(0)
    , profile_acceleration(0)  {
    }
  OperatingModesRequest_(const ContainerAllocator& _alloc)
    : cmd_type(_alloc)
    , name(_alloc)
    , mode(_alloc)
    , profile_type(_alloc)
    , profile_velocity(0)
    , profile_acceleration(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _profile_type_type;
  _profile_type_type profile_type;

   typedef int32_t _profile_velocity_type;
  _profile_velocity_type profile_velocity;

   typedef int32_t _profile_acceleration_type;
  _profile_acceleration_type profile_acceleration;





  typedef boost::shared_ptr< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OperatingModesRequest_

typedef ::interbotix_xs_msgs::OperatingModesRequest_<std::allocator<void> > OperatingModesRequest;

typedef boost::shared_ptr< ::interbotix_xs_msgs::OperatingModesRequest > OperatingModesRequestPtr;
typedef boost::shared_ptr< ::interbotix_xs_msgs::OperatingModesRequest const> OperatingModesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.name == rhs.name &&
    lhs.mode == rhs.mode &&
    lhs.profile_type == rhs.profile_type &&
    lhs.profile_velocity == rhs.profile_velocity &&
    lhs.profile_acceleration == rhs.profile_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_xs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb68bef3d517c840b0a5cc0f73d64e36";
  }

  static const char* value(const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb68bef3d517c840ULL;
  static const uint64_t static_value2 = 0xb0a5cc0f73d64e36ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_xs_msgs/OperatingModesRequest";
  }

  static const char* value(const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Set Operating Modes\n"
"#\n"
"# To get familiar with the various operating modes, go to...\n"
"# http://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_workbench/\n"
"# ...click on a motor model, and scroll down to the 'Operating Mode' section.\n"
"#\n"
"# There are 6 valid operating modes. They are...\n"
"#   \"position\" - allows up to 1 complete joint revolution (perfect for arm joints); units are in radians\n"
"#   \"ext_position\" - allows up to 512 joint revolutions; units are in radians\n"
"#   \"velocity\" - allows infinite number of rotations (perfect for wheeled robots); units are in rad/s\n"
"#   \"current\" - allows infinite number of rotations (perfect for grippers); units are in milliamps\n"
"#   \"current_based_position\" - allows up to 512 joint revolutions; units are in radians\n"
"#   \"pwm\" - allows infinite number of rotations (perfect for grippers); units are in PWM\n"
"#\n"
"# Note that the interbotix_xs_sdk offers one other 'pseudo' operating mode that can be useful in controlling Interbotix Grippers - called \"linear_position\".\n"
"# Behind the scenes, it uses the \"position\" operating mode mentioned above. The main difference is that with this mode, a desired linear distance [m]\n"
"# between the two gripper fingers can be commanded. In the \"position\" mode though, only the angular position of the motor can be commanded.\n"
"#\n"
"# There are 2 valid profile types - either 'time' or 'velocity'. Depending on which is chosen, the following parameters behave differently.\n"
"#\n"
"# 1) profile_velocity: acts as a pass-through to the Profile_Velocity register and operates in one of two ways. If\n"
"#    'profile_type' is set to 'velocity', this parameter describes the max velocity limit for the specified joint(s);\n"
"#    for example, if doing 'position' control, setting this to '131' would be equivalent to a limit of 3.14 rad/s; if\n"
"#    'profile_type' is set to 'time', this parameter sets the time span (in milliseconds) that it should take for the\n"
"#    specified joint(s) to move; to have an 'infinite' max limit, set to '0'.\n"
"#\n"
"# 2) profile_acceleration: acts as a pass-through to the Profile_Acceleration register and operates in one of two ways. If\n"
"#    'profile_type' is set to 'velocity', this parameter describes the max acceleration limit for the specified joint(s);\n"
"#    for example, if doing 'position' or 'velocity' control, setting this to '15' would be equivalent to a limit of 5.6 rad/s^2;\n"
"#    if 'profile_type' is set to 'time', this parameter sets the time span (in milliseconds) that it should take for the\n"
"#    specified joint(s) to accelerate; to have an 'infinite' max limit, set to '0'.\n"
"\n"
"string cmd_type                     # set to 'group' if commanding a joint group or 'single' if commanding a single joint\n"
"string name                         # name of the group if commanding a joint group or joint if commanding a single joint\n"
"string mode                         # desired operating mode as described above\n"
"string profile_type                 # desired 'profile' type - either 'time' or 'velocity' as described above\n"
"int32 profile_velocity              # desired velocity profile as explained above - only used in 'position' or the 'ext_position' control modes\n"
"int32 profile_acceleration          # desired acceleration profile as explained above - used in all modes except for 'current' and 'pwm' control\n"
;
  }

  static const char* value(const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.name);
      stream.next(m.mode);
      stream.next(m.profile_type);
      stream.next(m.profile_velocity);
      stream.next(m.profile_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OperatingModesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_xs_msgs::OperatingModesRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "profile_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.profile_type);
    s << indent << "profile_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.profile_velocity);
    s << indent << "profile_acceleration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.profile_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_XS_MSGS_MESSAGE_OPERATINGMODESREQUEST_H
