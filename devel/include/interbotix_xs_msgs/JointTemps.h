// Generated by gencpp from file interbotix_xs_msgs/JointTemps.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_XS_MSGS_MESSAGE_JOINTTEMPS_H
#define INTERBOTIX_XS_MSGS_MESSAGE_JOINTTEMPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_xs_msgs
{
template <class ContainerAllocator>
struct JointTemps_
{
  typedef JointTemps_<ContainerAllocator> Type;

  JointTemps_()
    : names()
    , temps()  {
    }
  JointTemps_(const ContainerAllocator& _alloc)
    : names(_alloc)
    , temps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _temps_type;
  _temps_type temps;





  typedef boost::shared_ptr< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> const> ConstPtr;

}; // struct JointTemps_

typedef ::interbotix_xs_msgs::JointTemps_<std::allocator<void> > JointTemps;

typedef boost::shared_ptr< ::interbotix_xs_msgs::JointTemps > JointTempsPtr;
typedef boost::shared_ptr< ::interbotix_xs_msgs::JointTemps const> JointTempsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator2> & rhs)
{
  return lhs.names == rhs.names &&
    lhs.temps == rhs.temps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_xs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c3b043513eb09ccdff55ab4d97383c3";
  }

  static const char* value(const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c3b043513eb09ccULL;
  static const uint64_t static_value2 = 0xdff55ab4d97383c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_xs_msgs/JointTemps";
  }

  static const char* value(const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used specifically in the interbotix_xsarm_diagnostic_tool package\n"
"\n"
"# Holds the temperatures [C] for the specified joints\n"
"\n"
"string[] names\n"
"int32[] temps\n"
;
  }

  static const char* value(const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.names);
      stream.next(m.temps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointTemps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_xs_msgs::JointTemps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_xs_msgs::JointTemps_<ContainerAllocator>& v)
  {
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "temps[]" << std::endl;
    for (size_t i = 0; i < v.temps.size(); ++i)
    {
      s << indent << "  temps[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.temps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_XS_MSGS_MESSAGE_JOINTTEMPS_H
