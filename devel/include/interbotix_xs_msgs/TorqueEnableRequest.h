// Generated by gencpp from file interbotix_xs_msgs/TorqueEnableRequest.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_XS_MSGS_MESSAGE_TORQUEENABLEREQUEST_H
#define INTERBOTIX_XS_MSGS_MESSAGE_TORQUEENABLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_xs_msgs
{
template <class ContainerAllocator>
struct TorqueEnableRequest_
{
  typedef TorqueEnableRequest_<ContainerAllocator> Type;

  TorqueEnableRequest_()
    : cmd_type()
    , name()
    , enable(false)  {
    }
  TorqueEnableRequest_(const ContainerAllocator& _alloc)
    : cmd_type(_alloc)
    , name(_alloc)
    , enable(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _enable_type;
  _enable_type enable;





  typedef boost::shared_ptr< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TorqueEnableRequest_

typedef ::interbotix_xs_msgs::TorqueEnableRequest_<std::allocator<void> > TorqueEnableRequest;

typedef boost::shared_ptr< ::interbotix_xs_msgs::TorqueEnableRequest > TorqueEnableRequestPtr;
typedef boost::shared_ptr< ::interbotix_xs_msgs::TorqueEnableRequest const> TorqueEnableRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.name == rhs.name &&
    lhs.enable == rhs.enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_xs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "023452ade9f3d4979c75bd4e0d60f0c9";
  }

  static const char* value(const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x023452ade9f3d497ULL;
  static const uint64_t static_value2 = 0x9c75bd4e0d60f0c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_xs_msgs/TorqueEnableRequest";
  }

  static const char* value(const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Torque joints on/off\n"
"\n"
"string cmd_type          # set to 'group' if commanding a joint group or 'single' if commanding a single joint\n"
"string name              # name of the group if commanding a joint group or joint if commanding a single joint\n"
"bool enable              # set to 'true' to torque on or 'false' to torque off\n"
;
  }

  static const char* value(const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.name);
      stream.next(m.enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TorqueEnableRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_xs_msgs::TorqueEnableRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_XS_MSGS_MESSAGE_TORQUEENABLEREQUEST_H
