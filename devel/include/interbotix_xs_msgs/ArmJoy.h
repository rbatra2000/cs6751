// Generated by gencpp from file interbotix_xs_msgs/ArmJoy.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_XS_MSGS_MESSAGE_ARMJOY_H
#define INTERBOTIX_XS_MSGS_MESSAGE_ARMJOY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_xs_msgs
{
template <class ContainerAllocator>
struct ArmJoy_
{
  typedef ArmJoy_<ContainerAllocator> Type;

  ArmJoy_()
    : ee_x_cmd(0)
    , ee_y_cmd(0)
    , ee_z_cmd(0)
    , ee_roll_cmd(0)
    , ee_pitch_cmd(0)
    , waist_cmd(0)
    , gripper_cmd(0)
    , pose_cmd(0)
    , speed_cmd(0)
    , speed_toggle_cmd(0)
    , gripper_pwm_cmd(0)
    , torque_cmd(0)  {
    }
  ArmJoy_(const ContainerAllocator& _alloc)
    : ee_x_cmd(0)
    , ee_y_cmd(0)
    , ee_z_cmd(0)
    , ee_roll_cmd(0)
    , ee_pitch_cmd(0)
    , waist_cmd(0)
    , gripper_cmd(0)
    , pose_cmd(0)
    , speed_cmd(0)
    , speed_toggle_cmd(0)
    , gripper_pwm_cmd(0)
    , torque_cmd(0)  {
  (void)_alloc;
    }



   typedef int8_t _ee_x_cmd_type;
  _ee_x_cmd_type ee_x_cmd;

   typedef int8_t _ee_y_cmd_type;
  _ee_y_cmd_type ee_y_cmd;

   typedef int8_t _ee_z_cmd_type;
  _ee_z_cmd_type ee_z_cmd;

   typedef int8_t _ee_roll_cmd_type;
  _ee_roll_cmd_type ee_roll_cmd;

   typedef int8_t _ee_pitch_cmd_type;
  _ee_pitch_cmd_type ee_pitch_cmd;

   typedef int8_t _waist_cmd_type;
  _waist_cmd_type waist_cmd;

   typedef int8_t _gripper_cmd_type;
  _gripper_cmd_type gripper_cmd;

   typedef int8_t _pose_cmd_type;
  _pose_cmd_type pose_cmd;

   typedef int8_t _speed_cmd_type;
  _speed_cmd_type speed_cmd;

   typedef int8_t _speed_toggle_cmd_type;
  _speed_toggle_cmd_type speed_toggle_cmd;

   typedef int8_t _gripper_pwm_cmd_type;
  _gripper_pwm_cmd_type gripper_pwm_cmd;

   typedef int8_t _torque_cmd_type;
  _torque_cmd_type torque_cmd;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EE_X_INC)
  #undef EE_X_INC
#endif
#if defined(_WIN32) && defined(EE_X_DEC)
  #undef EE_X_DEC
#endif
#if defined(_WIN32) && defined(EE_Y_INC)
  #undef EE_Y_INC
#endif
#if defined(_WIN32) && defined(EE_Y_DEC)
  #undef EE_Y_DEC
#endif
#if defined(_WIN32) && defined(EE_Z_INC)
  #undef EE_Z_INC
#endif
#if defined(_WIN32) && defined(EE_Z_DEC)
  #undef EE_Z_DEC
#endif
#if defined(_WIN32) && defined(EE_ROLL_CCW)
  #undef EE_ROLL_CCW
#endif
#if defined(_WIN32) && defined(EE_ROLL_CW)
  #undef EE_ROLL_CW
#endif
#if defined(_WIN32) && defined(EE_PITCH_UP)
  #undef EE_PITCH_UP
#endif
#if defined(_WIN32) && defined(EE_PITCH_DOWN)
  #undef EE_PITCH_DOWN
#endif
#if defined(_WIN32) && defined(WAIST_CCW)
  #undef WAIST_CCW
#endif
#if defined(_WIN32) && defined(WAIST_CW)
  #undef WAIST_CW
#endif
#if defined(_WIN32) && defined(GRIPPER_OPEN)
  #undef GRIPPER_OPEN
#endif
#if defined(_WIN32) && defined(GRIPPER_CLOSE)
  #undef GRIPPER_CLOSE
#endif
#if defined(_WIN32) && defined(HOME_POSE)
  #undef HOME_POSE
#endif
#if defined(_WIN32) && defined(SLEEP_POSE)
  #undef SLEEP_POSE
#endif
#if defined(_WIN32) && defined(SPEED_INC)
  #undef SPEED_INC
#endif
#if defined(_WIN32) && defined(SPEED_DEC)
  #undef SPEED_DEC
#endif
#if defined(_WIN32) && defined(SPEED_COURSE)
  #undef SPEED_COURSE
#endif
#if defined(_WIN32) && defined(SPEED_FINE)
  #undef SPEED_FINE
#endif
#if defined(_WIN32) && defined(GRIPPER_PWM_INC)
  #undef GRIPPER_PWM_INC
#endif
#if defined(_WIN32) && defined(GRIPPER_PWM_DEC)
  #undef GRIPPER_PWM_DEC
#endif
#if defined(_WIN32) && defined(TORQUE_ON)
  #undef TORQUE_ON
#endif
#if defined(_WIN32) && defined(TORQUE_OFF)
  #undef TORQUE_OFF
#endif

  enum {
    EE_X_INC = 1,
    EE_X_DEC = 2,
    EE_Y_INC = 3,
    EE_Y_DEC = 4,
    EE_Z_INC = 5,
    EE_Z_DEC = 6,
    EE_ROLL_CCW = 7,
    EE_ROLL_CW = 8,
    EE_PITCH_UP = 9,
    EE_PITCH_DOWN = 10,
    WAIST_CCW = 11,
    WAIST_CW = 12,
    GRIPPER_OPEN = 13,
    GRIPPER_CLOSE = 14,
    HOME_POSE = 15,
    SLEEP_POSE = 16,
    SPEED_INC = 17,
    SPEED_DEC = 18,
    SPEED_COURSE = 19,
    SPEED_FINE = 20,
    GRIPPER_PWM_INC = 21,
    GRIPPER_PWM_DEC = 22,
    TORQUE_ON = 23,
    TORQUE_OFF = 24,
  };


  typedef boost::shared_ptr< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> const> ConstPtr;

}; // struct ArmJoy_

typedef ::interbotix_xs_msgs::ArmJoy_<std::allocator<void> > ArmJoy;

typedef boost::shared_ptr< ::interbotix_xs_msgs::ArmJoy > ArmJoyPtr;
typedef boost::shared_ptr< ::interbotix_xs_msgs::ArmJoy const> ArmJoyConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator2> & rhs)
{
  return lhs.ee_x_cmd == rhs.ee_x_cmd &&
    lhs.ee_y_cmd == rhs.ee_y_cmd &&
    lhs.ee_z_cmd == rhs.ee_z_cmd &&
    lhs.ee_roll_cmd == rhs.ee_roll_cmd &&
    lhs.ee_pitch_cmd == rhs.ee_pitch_cmd &&
    lhs.waist_cmd == rhs.waist_cmd &&
    lhs.gripper_cmd == rhs.gripper_cmd &&
    lhs.pose_cmd == rhs.pose_cmd &&
    lhs.speed_cmd == rhs.speed_cmd &&
    lhs.speed_toggle_cmd == rhs.speed_toggle_cmd &&
    lhs.gripper_pwm_cmd == rhs.gripper_pwm_cmd &&
    lhs.torque_cmd == rhs.torque_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator1> & lhs, const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_xs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09eb0cc37cce12e41a0f984f2c2f53cd";
  }

  static const char* value(const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09eb0cc37cce12e4ULL;
  static const uint64_t static_value2 = 0x1a0f984f2c2f53cdULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_xs_msgs/ArmJoy";
  }

  static const char* value(const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used specifically in the interbotix_xsarm_joy package\n"
"#\n"
"# Maps raw 'joy' commands to more specific ones to control an Interbotix manipulator\n"
"\n"
"# enum values that define the joystick controls for the robot\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Control the motion of the virtual 'ee_gripper_link' or end effector using the modern_robotics_ik engine\n"
"# Position Control\n"
"int8 EE_X_INC = 1\n"
"int8 EE_X_DEC = 2\n"
"int8 EE_Y_INC = 3\n"
"int8 EE_Y_DEC = 4\n"
"int8 EE_Z_INC = 5\n"
"int8 EE_Z_DEC = 6\n"
"\n"
"# Orientation Control\n"
"int8 EE_ROLL_CCW = 7\n"
"int8 EE_ROLL_CW = 8\n"
"int8 EE_PITCH_UP = 9\n"
"int8 EE_PITCH_DOWN = 10\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Control the motion of independent joints on the Arm or send predefined robot poses\n"
"# Waist Joint Control\n"
"int8 WAIST_CCW = 11\n"
"int8 WAIST_CW = 12\n"
"\n"
"# Gripper Control\n"
"int8 GRIPPER_OPEN = 13\n"
"int8 GRIPPER_CLOSE = 14\n"
"\n"
"# Pose Control\n"
"int8 HOME_POSE = 15\n"
"int8 SLEEP_POSE = 16\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Customize configurations for the Interbotix Arm\n"
"# Inc/Dec Joint speed\n"
"int8 SPEED_INC = 17\n"
"int8 SPEED_DEC = 18\n"
"\n"
"# Quickly toggle between a fast and slow speed setting\n"
"int8 SPEED_COURSE = 19\n"
"int8 SPEED_FINE = 20\n"
"\n"
"# Inc/Dec Gripper pressure\n"
"int8 GRIPPER_PWM_INC = 21\n"
"int8 GRIPPER_PWM_DEC = 22\n"
"\n"
"# Torque On/Off all servos\n"
"int8 TORQUE_ON = 23\n"
"int8 TORQUE_OFF = 24\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Control the motion of the Interbotix Arm\n"
"int8 ee_x_cmd\n"
"int8 ee_y_cmd\n"
"int8 ee_z_cmd\n"
"int8 ee_roll_cmd\n"
"int8 ee_pitch_cmd\n"
"\n"
"# Independent Joint/Pose Control\n"
"int8 waist_cmd\n"
"int8 gripper_cmd\n"
"int8 pose_cmd\n"
"\n"
"# Misc. Configs\n"
"int8 speed_cmd\n"
"int8 speed_toggle_cmd\n"
"int8 gripper_pwm_cmd\n"
"int8 torque_cmd\n"
;
  }

  static const char* value(const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ee_x_cmd);
      stream.next(m.ee_y_cmd);
      stream.next(m.ee_z_cmd);
      stream.next(m.ee_roll_cmd);
      stream.next(m.ee_pitch_cmd);
      stream.next(m.waist_cmd);
      stream.next(m.gripper_cmd);
      stream.next(m.pose_cmd);
      stream.next(m.speed_cmd);
      stream.next(m.speed_toggle_cmd);
      stream.next(m.gripper_pwm_cmd);
      stream.next(m.torque_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmJoy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_xs_msgs::ArmJoy_<ContainerAllocator>& v)
  {
    s << indent << "ee_x_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_x_cmd);
    s << indent << "ee_y_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_y_cmd);
    s << indent << "ee_z_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_z_cmd);
    s << indent << "ee_roll_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_roll_cmd);
    s << indent << "ee_pitch_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_pitch_cmd);
    s << indent << "waist_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.waist_cmd);
    s << indent << "gripper_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_cmd);
    s << indent << "pose_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pose_cmd);
    s << indent << "speed_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed_cmd);
    s << indent << "speed_toggle_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed_toggle_cmd);
    s << indent << "gripper_pwm_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_pwm_cmd);
    s << indent << "torque_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.torque_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_XS_MSGS_MESSAGE_ARMJOY_H
