// Generated by gencpp from file interbotix_perception_modules/ClusterInfoArrayResponse.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_PERCEPTION_MODULES_MESSAGE_CLUSTERINFOARRAYRESPONSE_H
#define INTERBOTIX_PERCEPTION_MODULES_MESSAGE_CLUSTERINFOARRAYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <interbotix_perception_modules/ClusterInfo.h>

namespace interbotix_perception_modules
{
template <class ContainerAllocator>
struct ClusterInfoArrayResponse_
{
  typedef ClusterInfoArrayResponse_<ContainerAllocator> Type;

  ClusterInfoArrayResponse_()
    : clusters()  {
    }
  ClusterInfoArrayResponse_(const ContainerAllocator& _alloc)
    : clusters(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::interbotix_perception_modules::ClusterInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::interbotix_perception_modules::ClusterInfo_<ContainerAllocator> >::other >  _clusters_type;
  _clusters_type clusters;





  typedef boost::shared_ptr< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ClusterInfoArrayResponse_

typedef ::interbotix_perception_modules::ClusterInfoArrayResponse_<std::allocator<void> > ClusterInfoArrayResponse;

typedef boost::shared_ptr< ::interbotix_perception_modules::ClusterInfoArrayResponse > ClusterInfoArrayResponsePtr;
typedef boost::shared_ptr< ::interbotix_perception_modules::ClusterInfoArrayResponse const> ClusterInfoArrayResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator1> & lhs, const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator2> & rhs)
{
  return lhs.clusters == rhs.clusters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator1> & lhs, const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_perception_modules

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "911bd211bd6fd7e568c4562cf40f28fd";
  }

  static const char* value(const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x911bd211bd6fd7e5ULL;
  static const uint64_t static_value2 = 0x68c4562cf40f28fdULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_perception_modules/ClusterInfoArrayResponse";
  }

  static const char* value(const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_perception_modules/ClusterInfo[] clusters\n"
"\n"
"\n"
"================================================================================\n"
"MSG: interbotix_perception_modules/ClusterInfo\n"
"# This message is used specifically in the interbotix_perception_modules package\n"
"#\n"
"# Message that holds information about each cluster\n"
"\n"
"string frame_id                     # parent frame of the cluster (usually 'camera_depth_optical_frame' or similar)\n"
"geometry_msgs/Point position        # x, y, z position of the cluster\n"
"float32 yaw                         # yaw [rad] of the cluster; x-axis of the cluster should align\n"
"                                    # with the major-axis of a best-fit ellipse (currently not supported)\n"
"std_msgs/ColorRGBA color            # average RGB values (0 - 255) for the whole cluster\n"
"geometry_msgs/Point min_z_point     # point with the min 'z' value of the cluster\n"
"int32 num_points                    # number of points in the cluster\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clusters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClusterInfoArrayResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_perception_modules::ClusterInfoArrayResponse_<ContainerAllocator>& v)
  {
    s << indent << "clusters[]" << std::endl;
    for (size_t i = 0; i < v.clusters.size(); ++i)
    {
      s << indent << "  clusters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::interbotix_perception_modules::ClusterInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.clusters[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_PERCEPTION_MODULES_MESSAGE_CLUSTERINFOARRAYRESPONSE_H
