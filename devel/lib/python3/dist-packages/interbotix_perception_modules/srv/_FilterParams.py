# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_perception_modules/FilterParamsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FilterParamsRequest(genpy.Message):
  _md5sum = "57d51b939efff834ad5e55a181a7a0a0"
  _type = "interbotix_perception_modules/FilterParamsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This service is used specifically in the interbotix_perception_modules package
#
# Parameters used to tune the various PCL Pointcloud filters

float32 x_filter_min            # minimum value [m] along the x axis beyond which all points will be cropped when doing Crop Box Filtering
float32 x_filter_max            # maximum value [m] along the x axis beyond which all points will be cropped when doing Crop Box Filtering
float32 y_filter_min            # minimum value [m] along the y axis beyond which all points will be cropped when doing Crop Box Filtering
float32 y_filter_max            # maximum value [m] along the y axis beyond which all points will be cropped when doing Crop Box Filtering
float32 z_filter_min            # minimum value [m] along the z axis beyond which all points will be cropped when doing Crop Box Filtering
float32 z_filter_max            # maximum value [m] along the z axis beyond which all points will be cropped when doing Crop Box Filtering
float32 voxel_leaf_size         # voxel leaf size [m] for the x, y, and z axes when doing Voxel Filtering
int32 plane_max_iter            # maximum number of iterations the algorithm should go when when doing Planar Segmentation
float32 plane_dist_thresh       # distance [m] perpendicular from the planar model outside of which points should not be segmented out when doing Planar Segmentation
float32 ror_radius_search       # desired search radius when doing Radius Outlier Removal
int32 ror_min_neighbors         # minimum number of neighbors a point should have to not be cropped out when doing Radius Outlier Removal
float32 cluster_tol             # any point within this distance [m] will be considered part of the same cluster
int32 cluster_min_size          # minimum number of points a cluster must have to be considered a cluster
int32 cluster_max_size          # maximum number of points a cluster can have to be considered a cluster
"""
  __slots__ = ['x_filter_min','x_filter_max','y_filter_min','y_filter_max','z_filter_min','z_filter_max','voxel_leaf_size','plane_max_iter','plane_dist_thresh','ror_radius_search','ror_min_neighbors','cluster_tol','cluster_min_size','cluster_max_size']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','int32','float32','float32','int32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_filter_min,x_filter_max,y_filter_min,y_filter_max,z_filter_min,z_filter_max,voxel_leaf_size,plane_max_iter,plane_dist_thresh,ror_radius_search,ror_min_neighbors,cluster_tol,cluster_min_size,cluster_max_size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterParamsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x_filter_min is None:
        self.x_filter_min = 0.
      if self.x_filter_max is None:
        self.x_filter_max = 0.
      if self.y_filter_min is None:
        self.y_filter_min = 0.
      if self.y_filter_max is None:
        self.y_filter_max = 0.
      if self.z_filter_min is None:
        self.z_filter_min = 0.
      if self.z_filter_max is None:
        self.z_filter_max = 0.
      if self.voxel_leaf_size is None:
        self.voxel_leaf_size = 0.
      if self.plane_max_iter is None:
        self.plane_max_iter = 0
      if self.plane_dist_thresh is None:
        self.plane_dist_thresh = 0.
      if self.ror_radius_search is None:
        self.ror_radius_search = 0.
      if self.ror_min_neighbors is None:
        self.ror_min_neighbors = 0
      if self.cluster_tol is None:
        self.cluster_tol = 0.
      if self.cluster_min_size is None:
        self.cluster_min_size = 0
      if self.cluster_max_size is None:
        self.cluster_max_size = 0
    else:
      self.x_filter_min = 0.
      self.x_filter_max = 0.
      self.y_filter_min = 0.
      self.y_filter_max = 0.
      self.z_filter_min = 0.
      self.z_filter_max = 0.
      self.voxel_leaf_size = 0.
      self.plane_max_iter = 0
      self.plane_dist_thresh = 0.
      self.ror_radius_search = 0.
      self.ror_min_neighbors = 0
      self.cluster_tol = 0.
      self.cluster_min_size = 0
      self.cluster_max_size = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fi2fif2i().pack(_x.x_filter_min, _x.x_filter_max, _x.y_filter_min, _x.y_filter_max, _x.z_filter_min, _x.z_filter_max, _x.voxel_leaf_size, _x.plane_max_iter, _x.plane_dist_thresh, _x.ror_radius_search, _x.ror_min_neighbors, _x.cluster_tol, _x.cluster_min_size, _x.cluster_max_size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.x_filter_min, _x.x_filter_max, _x.y_filter_min, _x.y_filter_max, _x.z_filter_min, _x.z_filter_max, _x.voxel_leaf_size, _x.plane_max_iter, _x.plane_dist_thresh, _x.ror_radius_search, _x.ror_min_neighbors, _x.cluster_tol, _x.cluster_min_size, _x.cluster_max_size,) = _get_struct_7fi2fif2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fi2fif2i().pack(_x.x_filter_min, _x.x_filter_max, _x.y_filter_min, _x.y_filter_max, _x.z_filter_min, _x.z_filter_max, _x.voxel_leaf_size, _x.plane_max_iter, _x.plane_dist_thresh, _x.ror_radius_search, _x.ror_min_neighbors, _x.cluster_tol, _x.cluster_min_size, _x.cluster_max_size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.x_filter_min, _x.x_filter_max, _x.y_filter_min, _x.y_filter_max, _x.z_filter_min, _x.z_filter_max, _x.voxel_leaf_size, _x.plane_max_iter, _x.plane_dist_thresh, _x.ror_radius_search, _x.ror_min_neighbors, _x.cluster_tol, _x.cluster_min_size, _x.cluster_max_size,) = _get_struct_7fi2fif2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fi2fif2i = None
def _get_struct_7fi2fif2i():
    global _struct_7fi2fif2i
    if _struct_7fi2fif2i is None:
        _struct_7fi2fif2i = struct.Struct("<7fi2fif2i")
    return _struct_7fi2fif2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_perception_modules/FilterParamsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FilterParamsResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "interbotix_perception_modules/FilterParamsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterParamsResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class FilterParams(object):
  _type          = 'interbotix_perception_modules/FilterParams'
  _md5sum = '57d51b939efff834ad5e55a181a7a0a0'
  _request_class  = FilterParamsRequest
  _response_class = FilterParamsResponse
