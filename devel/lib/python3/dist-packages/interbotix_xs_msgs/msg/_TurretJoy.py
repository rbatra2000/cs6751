# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_xs_msgs/TurretJoy.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TurretJoy(genpy.Message):
  _md5sum = "cac3aec45a4ead9e4b41e201bb45d797"
  _type = "interbotix_xs_msgs/TurretJoy"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message is used specifically in the interbotix_xsturret_simple_interface package
#
# Maps raw 'joy' commands to more specific ones to control an Interbotix turret

# enum values that define the joystick controls for the robot

#########################################################################################################

# Control the pan-and-tilt mechanism
int8 PAN_CCW = 1
int8 PAN_CW = 2
int8 TILT_UP = 3
int8 TILT_DOWN = 4
int8 PAN_TILT_HOME = 5

#########################################################################################################

# Customize configurations for the Interbotix Turret
# Inc/Dec Joint speed
int8 SPEED_INC = 6
int8 SPEED_DEC = 7

# Quickly toggle between a fast and slow speed setting
int8 SPEED_COURSE = 8
int8 SPEED_FINE = 9

#########################################################################################################

# Control the motion of the pan-and-tilt mechanism
int8 pan_cmd
int8 tilt_cmd

# Speed Configs
int8 speed_cmd
int8 speed_toggle_cmd
"""
  # Pseudo-constants
  PAN_CCW = 1
  PAN_CW = 2
  TILT_UP = 3
  TILT_DOWN = 4
  PAN_TILT_HOME = 5
  SPEED_INC = 6
  SPEED_DEC = 7
  SPEED_COURSE = 8
  SPEED_FINE = 9

  __slots__ = ['pan_cmd','tilt_cmd','speed_cmd','speed_toggle_cmd']
  _slot_types = ['int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pan_cmd,tilt_cmd,speed_cmd,speed_toggle_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TurretJoy, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pan_cmd is None:
        self.pan_cmd = 0
      if self.tilt_cmd is None:
        self.tilt_cmd = 0
      if self.speed_cmd is None:
        self.speed_cmd = 0
      if self.speed_toggle_cmd is None:
        self.speed_toggle_cmd = 0
    else:
      self.pan_cmd = 0
      self.tilt_cmd = 0
      self.speed_cmd = 0
      self.speed_toggle_cmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4b().pack(_x.pan_cmd, _x.tilt_cmd, _x.speed_cmd, _x.speed_toggle_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.pan_cmd, _x.tilt_cmd, _x.speed_cmd, _x.speed_toggle_cmd,) = _get_struct_4b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4b().pack(_x.pan_cmd, _x.tilt_cmd, _x.speed_cmd, _x.speed_toggle_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.pan_cmd, _x.tilt_cmd, _x.speed_cmd, _x.speed_toggle_cmd,) = _get_struct_4b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4b = None
def _get_struct_4b():
    global _struct_4b
    if _struct_4b is None:
        _struct_4b = struct.Struct("<4b")
    return _struct_4b
