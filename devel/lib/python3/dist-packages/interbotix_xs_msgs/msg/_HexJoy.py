# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_xs_msgs/HexJoy.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HexJoy(genpy.Message):
  _md5sum = "99b1d8cef626ff2a04f51ab2f81ac80a"
  _type = "interbotix_xs_msgs/HexJoy"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message is used specifically in the interbotix_xshexapod_joy package
#
# Maps raw 'joy' commands to more specific ones to control an Interbotix hexapod

# enum values that define the joystick controls for the robot

#########################################################################################################

# Command Options to move the Hexapod in the 'world' or in 'place'
# World Control
int8 WORLD_X_INC = 1
int8 WORLD_X_DEC = 2
int8 WORLD_Y_INC = 3
int8 WORLD_Y_DEC = 4
int8 WORLD_YAW_CCW = 5
int8 WORLD_YAW_CW = 6

# In Place Control
int8 PLACE_X_INC = 7
int8 PLACE_X_DEC = 8
int8 PLACE_Y_INC = 9
int8 PLACE_Y_DEC = 10
int8 PLACE_Z_INC = 11
int8 PLACE_Z_DEC = 12
int8 PLACE_ROLL_CCW = 13
int8 PLACE_ROLL_CW = 14
int8 PLACE_PITCH_UP = 15
int8 PLACE_PITCH_DOWN = 16

# Move Type
int8 MOVE_HEXAPOD = 17
int8 MOVE_LEG = 18

# Pose Control
int8 HOME_POSE = 19
int8 SLEEP_POSE = 20

#########################################################################################################

# Customize configurations for the Interbotix Hexapod

# Cycle through the various gaits when in 'move_hexapod' mode
int8 GAIT_NEXT = 21
int8 GAIT_PREVIOUS = 22

# Cycle through the legs when in 'move_leg' mode
int8 LEG_NEXT = 23
int8 LEG_PREVIOUS = 24

# Widen or narrow the hexapod's stance
int8 WIDEN_STANCE = 25
int8 NARROW_STANCE = 26

# Reboot motors if necessary
int8 REBOOT_MOTORS = 27

# Set the current stance and hexapod height to be the new 'Home Pose'
int8 SET_HOME_POSE = 28

# Inc/Dec speed
int8 SPEED_INC = 29
int8 SPEED_DEC = 30

# Quickly toggle between a fast and slow speed setting
int8 SPEED_COURSE = 31
int8 SPEED_FINE = 32

#########################################################################################################

# Control the motion of the Interbotix Hexapod
int8 world_x_cmd
int8 world_y_cmd
int8 world_yaw_cmd

int8 place_x_cmd
int8 place_y_cmd
int8 place_z_cmd
int8 place_roll_cmd
int8 place_pitch_cmd

int8 pose_cmd
int8 move_type_cmd

# Other Options
int8 gait_toggle_cmd
int8 leg_toggle_cmd
int8 stance_cmd
int8 reboot_cmd
int8 set_home_pose_cmd

# Speed Configs
int8 speed_cmd
int8 speed_toggle_cmd
"""
  # Pseudo-constants
  WORLD_X_INC = 1
  WORLD_X_DEC = 2
  WORLD_Y_INC = 3
  WORLD_Y_DEC = 4
  WORLD_YAW_CCW = 5
  WORLD_YAW_CW = 6
  PLACE_X_INC = 7
  PLACE_X_DEC = 8
  PLACE_Y_INC = 9
  PLACE_Y_DEC = 10
  PLACE_Z_INC = 11
  PLACE_Z_DEC = 12
  PLACE_ROLL_CCW = 13
  PLACE_ROLL_CW = 14
  PLACE_PITCH_UP = 15
  PLACE_PITCH_DOWN = 16
  MOVE_HEXAPOD = 17
  MOVE_LEG = 18
  HOME_POSE = 19
  SLEEP_POSE = 20
  GAIT_NEXT = 21
  GAIT_PREVIOUS = 22
  LEG_NEXT = 23
  LEG_PREVIOUS = 24
  WIDEN_STANCE = 25
  NARROW_STANCE = 26
  REBOOT_MOTORS = 27
  SET_HOME_POSE = 28
  SPEED_INC = 29
  SPEED_DEC = 30
  SPEED_COURSE = 31
  SPEED_FINE = 32

  __slots__ = ['world_x_cmd','world_y_cmd','world_yaw_cmd','place_x_cmd','place_y_cmd','place_z_cmd','place_roll_cmd','place_pitch_cmd','pose_cmd','move_type_cmd','gait_toggle_cmd','leg_toggle_cmd','stance_cmd','reboot_cmd','set_home_pose_cmd','speed_cmd','speed_toggle_cmd']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       world_x_cmd,world_y_cmd,world_yaw_cmd,place_x_cmd,place_y_cmd,place_z_cmd,place_roll_cmd,place_pitch_cmd,pose_cmd,move_type_cmd,gait_toggle_cmd,leg_toggle_cmd,stance_cmd,reboot_cmd,set_home_pose_cmd,speed_cmd,speed_toggle_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HexJoy, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.world_x_cmd is None:
        self.world_x_cmd = 0
      if self.world_y_cmd is None:
        self.world_y_cmd = 0
      if self.world_yaw_cmd is None:
        self.world_yaw_cmd = 0
      if self.place_x_cmd is None:
        self.place_x_cmd = 0
      if self.place_y_cmd is None:
        self.place_y_cmd = 0
      if self.place_z_cmd is None:
        self.place_z_cmd = 0
      if self.place_roll_cmd is None:
        self.place_roll_cmd = 0
      if self.place_pitch_cmd is None:
        self.place_pitch_cmd = 0
      if self.pose_cmd is None:
        self.pose_cmd = 0
      if self.move_type_cmd is None:
        self.move_type_cmd = 0
      if self.gait_toggle_cmd is None:
        self.gait_toggle_cmd = 0
      if self.leg_toggle_cmd is None:
        self.leg_toggle_cmd = 0
      if self.stance_cmd is None:
        self.stance_cmd = 0
      if self.reboot_cmd is None:
        self.reboot_cmd = 0
      if self.set_home_pose_cmd is None:
        self.set_home_pose_cmd = 0
      if self.speed_cmd is None:
        self.speed_cmd = 0
      if self.speed_toggle_cmd is None:
        self.speed_toggle_cmd = 0
    else:
      self.world_x_cmd = 0
      self.world_y_cmd = 0
      self.world_yaw_cmd = 0
      self.place_x_cmd = 0
      self.place_y_cmd = 0
      self.place_z_cmd = 0
      self.place_roll_cmd = 0
      self.place_pitch_cmd = 0
      self.pose_cmd = 0
      self.move_type_cmd = 0
      self.gait_toggle_cmd = 0
      self.leg_toggle_cmd = 0
      self.stance_cmd = 0
      self.reboot_cmd = 0
      self.set_home_pose_cmd = 0
      self.speed_cmd = 0
      self.speed_toggle_cmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17b().pack(_x.world_x_cmd, _x.world_y_cmd, _x.world_yaw_cmd, _x.place_x_cmd, _x.place_y_cmd, _x.place_z_cmd, _x.place_roll_cmd, _x.place_pitch_cmd, _x.pose_cmd, _x.move_type_cmd, _x.gait_toggle_cmd, _x.leg_toggle_cmd, _x.stance_cmd, _x.reboot_cmd, _x.set_home_pose_cmd, _x.speed_cmd, _x.speed_toggle_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.world_x_cmd, _x.world_y_cmd, _x.world_yaw_cmd, _x.place_x_cmd, _x.place_y_cmd, _x.place_z_cmd, _x.place_roll_cmd, _x.place_pitch_cmd, _x.pose_cmd, _x.move_type_cmd, _x.gait_toggle_cmd, _x.leg_toggle_cmd, _x.stance_cmd, _x.reboot_cmd, _x.set_home_pose_cmd, _x.speed_cmd, _x.speed_toggle_cmd,) = _get_struct_17b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17b().pack(_x.world_x_cmd, _x.world_y_cmd, _x.world_yaw_cmd, _x.place_x_cmd, _x.place_y_cmd, _x.place_z_cmd, _x.place_roll_cmd, _x.place_pitch_cmd, _x.pose_cmd, _x.move_type_cmd, _x.gait_toggle_cmd, _x.leg_toggle_cmd, _x.stance_cmd, _x.reboot_cmd, _x.set_home_pose_cmd, _x.speed_cmd, _x.speed_toggle_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.world_x_cmd, _x.world_y_cmd, _x.world_yaw_cmd, _x.place_x_cmd, _x.place_y_cmd, _x.place_z_cmd, _x.place_roll_cmd, _x.place_pitch_cmd, _x.pose_cmd, _x.move_type_cmd, _x.gait_toggle_cmd, _x.leg_toggle_cmd, _x.stance_cmd, _x.reboot_cmd, _x.set_home_pose_cmd, _x.speed_cmd, _x.speed_toggle_cmd,) = _get_struct_17b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17b = None
def _get_struct_17b():
    global _struct_17b
    if _struct_17b is None:
        _struct_17b = struct.Struct("<17b")
    return _struct_17b
